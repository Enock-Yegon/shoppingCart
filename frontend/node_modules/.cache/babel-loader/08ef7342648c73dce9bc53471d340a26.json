{"ast":null,"code":"import { useState, useContext, useReducer, useEffect, createElement, createContext } from 'react';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction useLocalStorage(key, initialValue) {\n  var _React$useState = useState(function () {\n      try {\n        var item = typeof window !== \"undefined\" && window.localStorage.getItem(key);\n        return item ? item : initialValue;\n      } catch (error) {\n        return initialValue;\n      }\n    }),\n    storedValue = _React$useState[0],\n    setStoredValue = _React$useState[1];\n  var setValue = function setValue(value) {\n    try {\n      var valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, valueToStore);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}\nvar initialState = {\n  items: [],\n  isEmpty: true,\n  totalItems: 0,\n  totalUniqueItems: 0,\n  cartTotal: 0,\n  metadata: {}\n};\nvar CartContext = /*#__PURE__*/createContext(initialState);\nvar createCartIdentifier = function createCartIdentifier(len) {\n  if (len === void 0) {\n    len = 12;\n  }\n  return [].concat(Array(len)).map(function () {\n    return (~~(Math.random() * 36)).toString(36);\n  }).join(\"\");\n};\nvar useCart = function useCart() {\n  var context = useContext(CartContext);\n  if (!context) throw new Error(\"Expected to be wrapped in a CartProvider\");\n  return context;\n};\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"SET_ITEMS\":\n      return generateCartState(state, action.payload);\n    case \"ADD_ITEM\":\n      {\n        var items = [].concat(state.items, [action.payload]);\n        return generateCartState(state, items);\n      }\n    case \"UPDATE_ITEM\":\n      {\n        var _items = state.items.map(function (item) {\n          if (item.id !== action.id) return item;\n          return _extends({}, item, action.payload);\n        });\n        return generateCartState(state, _items);\n      }\n    case \"REMOVE_ITEM\":\n      {\n        var _items2 = state.items.filter(function (i) {\n          return i.id !== action.id;\n        });\n        return generateCartState(state, _items2);\n      }\n    case \"EMPTY_CART\":\n      return initialState;\n    case \"CLEAR_CART_META\":\n      return _extends({}, state, {\n        metadata: {}\n      });\n    case \"SET_CART_META\":\n      return _extends({}, state, {\n        metadata: _extends({}, action.payload)\n      });\n    case \"UPDATE_CART_META\":\n      return _extends({}, state, {\n        metadata: _extends({}, state.metadata, action.payload)\n      });\n    default:\n      throw new Error(\"No action specified\");\n  }\n}\nvar generateCartState = function generateCartState(state, items) {\n  if (state === void 0) {\n    state = initialState;\n  }\n  var totalUniqueItems = calculateUniqueItems(items);\n  var isEmpty = totalUniqueItems === 0;\n  return _extends({}, initialState, state, {\n    items: calculateItemTotals(items),\n    totalItems: calculateTotalItems(items),\n    totalUniqueItems: totalUniqueItems,\n    cartTotal: calculateTotal(items),\n    isEmpty: isEmpty\n  });\n};\nvar calculateItemTotals = function calculateItemTotals(items) {\n  return items.map(function (item) {\n    return _extends({}, item, {\n      itemTotal: item.price * item.quantity\n    });\n  });\n};\nvar calculateTotal = function calculateTotal(items) {\n  return items.reduce(function (total, item) {\n    return total + item.quantity * item.price;\n  }, 0);\n};\nvar calculateTotalItems = function calculateTotalItems(items) {\n  return items.reduce(function (sum, item) {\n    return sum + item.quantity;\n  }, 0);\n};\nvar calculateUniqueItems = function calculateUniqueItems(items) {\n  return items.length;\n};\nvar CartProvider = function CartProvider(_ref) {\n  var children = _ref.children,\n    cartId = _ref.id,\n    _ref$defaultItems = _ref.defaultItems,\n    defaultItems = _ref$defaultItems === void 0 ? [] : _ref$defaultItems,\n    onSetItems = _ref.onSetItems,\n    onItemAdd = _ref.onItemAdd,\n    onItemUpdate = _ref.onItemUpdate,\n    onItemRemove = _ref.onItemRemove,\n    _ref$storage = _ref.storage,\n    storage = _ref$storage === void 0 ? useLocalStorage : _ref$storage,\n    metadata = _ref.metadata;\n  var id = cartId ? cartId : createCartIdentifier();\n  var _storage = storage(cartId ? \"react-use-cart-\" + id : \"react-use-cart\", JSON.stringify(_extends({\n      id: id\n    }, initialState, {\n      items: defaultItems,\n      metadata: metadata\n    }))),\n    savedCart = _storage[0],\n    saveCart = _storage[1];\n  var _React$useReducer = useReducer(reducer, JSON.parse(savedCart)),\n    state = _React$useReducer[0],\n    dispatch = _React$useReducer[1];\n  useEffect(function () {\n    saveCart(JSON.stringify(state));\n  }, [state, saveCart]);\n  var setItems = function setItems(items) {\n    dispatch({\n      type: \"SET_ITEMS\",\n      payload: items.map(function (item) {\n        return _extends({}, item, {\n          quantity: item.quantity || 1\n        });\n      })\n    });\n    onSetItems && onSetItems(items);\n  };\n  var addItem = function addItem(item, quantity) {\n    if (quantity === void 0) {\n      quantity = 1;\n    }\n    if (!item.id) throw new Error(\"You must provide an `id` for items\");\n    if (quantity <= 0) return;\n    var currentItem = state.items.find(function (i) {\n      return i.id === item.id;\n    });\n    if (!currentItem && !item.hasOwnProperty(\"price\")) throw new Error(\"You must pass a `price` for new items\");\n    if (!currentItem) {\n      var _payload = _extends({}, item, {\n        quantity: quantity\n      });\n      dispatch({\n        type: \"ADD_ITEM\",\n        payload: _payload\n      });\n      onItemAdd && onItemAdd(_payload);\n      return;\n    }\n    var payload = _extends({}, item, {\n      quantity: currentItem.quantity + quantity\n    });\n    dispatch({\n      type: \"UPDATE_ITEM\",\n      id: item.id,\n      payload: payload\n    });\n    onItemUpdate && onItemUpdate(payload);\n  };\n  var updateItem = function updateItem(id, payload) {\n    if (!id || !payload) {\n      return;\n    }\n    dispatch({\n      type: \"UPDATE_ITEM\",\n      id: id,\n      payload: payload\n    });\n    onItemUpdate && onItemUpdate(payload);\n  };\n  var updateItemQuantity = function updateItemQuantity(id, quantity) {\n    if (quantity <= 0) {\n      onItemRemove && onItemRemove(id);\n      dispatch({\n        type: \"REMOVE_ITEM\",\n        id: id\n      });\n      return;\n    }\n    var currentItem = state.items.find(function (item) {\n      return item.id === id;\n    });\n    if (!currentItem) throw new Error(\"No such item to update\");\n    var payload = _extends({}, currentItem, {\n      quantity: quantity\n    });\n    dispatch({\n      type: \"UPDATE_ITEM\",\n      id: id,\n      payload: payload\n    });\n    onItemUpdate && onItemUpdate(payload);\n  };\n  var removeItem = function removeItem(id) {\n    if (!id) return;\n    dispatch({\n      type: \"REMOVE_ITEM\",\n      id: id\n    });\n    onItemRemove && onItemRemove(id);\n  };\n  var emptyCart = function emptyCart() {\n    return dispatch({\n      type: \"EMPTY_CART\"\n    });\n  };\n  var getItem = function getItem(id) {\n    return state.items.find(function (i) {\n      return i.id === id;\n    });\n  };\n  var inCart = function inCart(id) {\n    return state.items.some(function (i) {\n      return i.id === id;\n    });\n  };\n  var clearCartMetadata = function clearCartMetadata() {\n    dispatch({\n      type: \"CLEAR_CART_META\"\n    });\n  };\n  var setCartMetadata = function setCartMetadata(metadata) {\n    if (!metadata) return;\n    dispatch({\n      type: \"SET_CART_META\",\n      payload: metadata\n    });\n  };\n  var updateCartMetadata = function updateCartMetadata(metadata) {\n    if (!metadata) return;\n    dispatch({\n      type: \"UPDATE_CART_META\",\n      payload: metadata\n    });\n  };\n  return createElement(CartContext.Provider, {\n    value: _extends({}, state, {\n      getItem: getItem,\n      inCart: inCart,\n      setItems: setItems,\n      addItem: addItem,\n      updateItem: updateItem,\n      updateItemQuantity: updateItemQuantity,\n      removeItem: removeItem,\n      emptyCart: emptyCart,\n      clearCartMetadata: clearCartMetadata,\n      setCartMetadata: setCartMetadata,\n      updateCartMetadata: updateCartMetadata\n    })\n  }, children);\n};\nexport { CartProvider, createCartIdentifier, initialState, useCart };","map":null,"metadata":{},"sourceType":"module"}